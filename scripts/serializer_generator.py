import sys, string, time

def generate_loader(lines):
	s = f'// This function was generated by {sys.argv[0]} on {time.ctime()}.\n'
	s += 'static void LoadFrom(rapidjson::Document &doc, std::string pointer) {\n'
	for type, name in lines:
		if type == "Snowflake": continue
		if type.startswith('std::vector'): continue
		
		originalName = name

		name = list(name)
		cursor = 0
		while cursor != len(name):
			if name[cursor] in string.ascii_uppercase:
				name.insert(cursor+1, name[cursor].lower())
				name[cursor] = '_'
			cursor += 1

		name = ''.join(name)

		if type == 'std::string':
			s += \
			f'	if(rapidjson::Value *{originalName}Ptr = rapidjson::Pointer((pointer + "/{name}").c_str()).Get(doc) )\n' \
			f'		if({originalName}Ptr->IsString()) g.{originalName} = {originalName}Ptr->GetString();\n\n'
		
		elif type.startswith('uint') or type.startswith('int'):
			s += \
			f'	if(rapidjson::Value *{originalName}Ptr = rapidjson::Pointer((pointer + "/{name}").c_str()).Get(doc) )\n' \
			f'		if({originalName}Ptr->IsInt()) g.{originalName} = {originalName}Ptr->GetInt();\n\n'
		
		elif type.startswith('bool'):
			s += \
			f'	if(rapidjson::Value *{originalName}Ptr = rapidjson::Pointer((pointer + "/{name}").c_str()).Get(doc) )\n' \
			f'		if({originalName}Ptr->IsBool()) g.{originalName} = {originalName}Ptr->GetBool();\n\n'
	
	return s + '}'

if __name__ == "__main__":
	if len(sys.argv) != 2:
		print('Usage:', sys.argv[0], '[header file path]')
		print()
		print('Generates rapidjson (de)serializer functions for Discord objects.')
		print()
		print('Example:', sys.argv[0], 'include/discord/guild.hpp')
		sys.exit(1)
	with open(sys.argv[1], 'r') as f:
		lines = [line[2:-2].split(' ') for line in f if line.startswith('\t\t') and line.endswith(';\n') and line.count(' ') == 1]

	print(generate_loader(lines))