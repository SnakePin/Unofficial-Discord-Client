# There is a good way to generate C++ code using a Python script.
# But you will not find it here.

# Warning: This script is deprecated and is no longer used.

import sys, string, time

structnames = ['User', 'Member', 'Channel']

def generate_loader(lines, structname):
	s =  f'// This function was generated by {sys.argv[0]} on {time.ctime()}.' + '\n'
	s += f'static {structname} LoadFrom(rapidjson::Document &doc, std::string pointer) {{' + '\n'
	s += f'\t{structname} g;\n'
	s += '\trapidjson::Value *ptr = nullptr;\n\n'

	for type, name in lines:
		originalName = name		
		if 'ID' in name:
			name = name.replace('ID', '_id')

		name = list(name)
		cursor = 0
		while cursor != len(name):
			if name[cursor] in string.ascii_uppercase:
				name.insert(cursor+1, name[cursor].lower())
				name[cursor] = '_'
			cursor += 1

		name = ''.join(name)

		typestring = None
		typearray = None
		if type == 'std::string':
			typestring = 'String'
		elif type.startswith('std::vector'):
			typestring = 'Array'
			typearray = type.split('<')[1].split('>')[0]
		elif type.startswith('uint') or type.startswith('int'):
			typestring = 'Int'
		elif type.startswith('bool'):
			typestring = 'Bool'
		elif type == 'Snowflake':
			typestring = type


		if type in structnames:
			s += \
'''\tif( (ptr = rapidjson::Pointer((pointer + "/{name}").c_str()).Get(doc)) && ptr->IsObject())
		g.{originalName} = {target}::LoadFrom(doc, pointer + "/{name}");
\n'''.format(name=name, originalName=originalName, target=type)

		elif typearray:
			s += \
'''	if( (ptr = rapidjson::Pointer((pointer + "/{name}").c_str()).Get(doc)) && ptr->IsArray()) {{
		int i=0;
		for(auto& element : ptr->GetArray())
			g.{originalName}.push_back(TARGETNAME::LoadFrom(doc, pointer + "/{name}/" + std::to_string(i++)));
	}}\n\n'''.format(name=name, originalName=originalName, structname=structname)

		elif typestring:
			s += \
				f'	if( (ptr = rapidjson::Pointer((pointer + "/{name}").c_str()).Get(doc)) && ptr->Is{typestring if not typestring == "Snowflake" else "String"}())\n'
			if type == 'Snowflake':
				s += f'		g.{originalName} = Snowflake(ptr->GetString());' + '\n\n'
			else:
				s += f'		g.{originalName} = ptr->Get{typestring}();' + '\n\n'
	
	return s + f'\treturn g;\n' + '}'

if __name__ == "__main__":
	if len(sys.argv) != 2:
		print('Warning: This script is deprecated and is no longer used.')
		print('Usage:', sys.argv[0], '[header file path]')
		print()
		print('Generates rapidjson (de)serializer functions for Discord objects.')
		print()
		print('Example:', sys.argv[0], 'include/discord/guild.hpp')
		sys.exit(1)
	with open(sys.argv[1], 'r') as f:
		data = f.read()
	structname = next(i[8:].split(' ')[0].strip() for i in data.split('\n') if '\tstruct ' in i)
	lines = [line[2:-1].split(' ') for line in data.split('\n') if line.startswith('\t\t') and line.endswith(';') and line.count(' ') == 1]

	print(generate_loader(lines, structname))