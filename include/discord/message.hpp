#pragma once
/*
id	snowflake	id of the message
channel_id	snowflake	id of the channel the message was sent in
guild_id?	snowflake	id of the guild the message was sent in
author*	user object	the author of this message (not guaranteed to be a valid user, see below)
member?	partial guild member object	member properties for this message's author
content	string	contents of the message
timestamp	ISO8601 timestamp	when this message was sent
edited_timestamp	?ISO8601 timestamp	when this message was edited (or null if never)
tts	boolean	whether this was a TTS message
mention_everyone	boolean	whether this message mentions everyone
mentions	array of user objects, with an additional partial member field	users specifically mentioned in the message
mention_roles	array of role object ids	roles specifically mentioned in this message
attachments	array of attachment objects	any attached files
embeds	array of embed objects	any embedded content
reactions?	array of reaction objects	reactions to the message
nonce?	?snowflake	used for validating a message was sent
pinned	boolean	whether this message is pinned
webhook_id?	snowflake	if the message is generated by a webhook, this is the webhook's id
type	integer	type of message
activity?	message activity object	sent with Rich Presence-related chat embeds
application?	message application object	sent with Rich Presence-related chat embeds
 */

#include <discord/snowflake.hpp>
#include <discord/embed.hpp>
#include <discord/reaction.hpp>

namespace Discord {
	
	struct Message {
		// https://discordapp.com/developers/docs/resources/channel#message-object
		Snowflake id;
		Snowflake channelID;
		Snowflake guildID;
		Snowflake nonce;
		int32_t type;

		std::string content;
		std::string timestamp;
		std::string editedTimestamp;
		bool tts;
		bool mentionEveryone;

		// User mentions[]
		std::vector<Snowflake> mentionedroleIDs;

		// attachments[]
		std::vector<Embed> embeds;
		std::vector<Reaction> reactions;

		bool pinned;
		Snowflake webhookID;

		// Two *Rich Presence* fields were not implemented
		// MessageActivityObject activity;
		// MessageApplicationObject application;
	};

}