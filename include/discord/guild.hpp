#pragma once

#include <discord/snowflake.hpp>
#include <discord/emoji.hpp>
#include <discord/role.hpp>
#include <discord/channel.hpp>
#include <discord/member.hpp>

#include <vector>
#include <string>

namespace Discord {

	struct Guild {
		// https://discordapp.com/developers/docs/resources/guild#guild-object

		Snowflake id;
		std::string name;
		std::string splashHash;
		std::string iconHash;

		Snowflake ownerID;
		uint32_t permissions;
		
		std::string region;

		Snowflake afkChannelID;
		int32_t afkTimeout;
		
		bool embedable;
		Snowflake embedChannelID;

		uint8_t verificationLevel;
		uint8_t defaultMessageNotificationsLevel;
		uint8_t explicitContentFilterLevel;
		uint8_t mfaLevel;

		std::vector<Role> roles;
		std::vector<Emoji> emoji;

		std::vector<std::string> features;

		Snowflake applicationID;
		
		bool widgetEnabled;
		Snowflake widgetChannelID;

		Snowflake systemChannelID;

		std::string joinedAt;

		bool large;
		bool unavailable;
		int32_t memberCount;

		// voicestates[]

		std::vector<Member> members;
		std::vector<Channel> channels;

		int32_t maxPresences;
		int32_t maxMembers;
		int32_t premiumTier;

		std::string description;
		std::string bannerHash;

		// This function was generated by scripts/serializer_generator.py on Fri Jun 21 08:02:49 2019
		static Guild LoadFrom(rapidjson::Value &doc, std::string pointer) {
			Guild g;
			if(rapidjson::Value *namePtr = rapidjson::Pointer((pointer + "/name").c_str()).Get(doc) )
				if(namePtr->IsString()) g.name = namePtr->GetString();

			if(rapidjson::Value *splashHashPtr = rapidjson::Pointer((pointer + "/splash").c_str()).Get(doc) )
				if(splashHashPtr->IsString()) g.splashHash = splashHashPtr->GetString();

			if(rapidjson::Value *iconHashPtr = rapidjson::Pointer((pointer + "/icon").c_str()).Get(doc) )
				if(iconHashPtr->IsString()) g.iconHash = iconHashPtr->GetString();

			if(rapidjson::Value *permissionsPtr = rapidjson::Pointer((pointer + "/permissions").c_str()).Get(doc) )
				if(permissionsPtr->IsInt()) g.permissions = permissionsPtr->GetInt();

			if(rapidjson::Value *regionPtr = rapidjson::Pointer((pointer + "/region").c_str()).Get(doc) )
				if(regionPtr->IsString()) g.region = regionPtr->GetString();

			if(rapidjson::Value *afkTimeoutPtr = rapidjson::Pointer((pointer + "/afk_timeout").c_str()).Get(doc) )
				if(afkTimeoutPtr->IsInt()) g.afkTimeout = afkTimeoutPtr->GetInt();

			if(rapidjson::Value *embedablePtr = rapidjson::Pointer((pointer + "/embedable").c_str()).Get(doc) )
				if(embedablePtr->IsBool()) g.embedable = embedablePtr->GetBool();

			if(rapidjson::Value *verificationLevelPtr = rapidjson::Pointer((pointer + "/verification_level").c_str()).Get(doc) )
				if(verificationLevelPtr->IsInt()) g.verificationLevel = verificationLevelPtr->GetInt();

			if(rapidjson::Value *defaultMessageNotificationsLevelPtr = rapidjson::Pointer((pointer + "/default_message_notifications_level").c_str()).Get(doc) )
				if(defaultMessageNotificationsLevelPtr->IsInt()) g.defaultMessageNotificationsLevel = defaultMessageNotificationsLevelPtr->GetInt();

			if(rapidjson::Value *explicitContentFilterLevelPtr = rapidjson::Pointer((pointer + "/explicit_content_filter_level").c_str()).Get(doc) )
				if(explicitContentFilterLevelPtr->IsInt()) g.explicitContentFilterLevel = explicitContentFilterLevelPtr->GetInt();

			if(rapidjson::Value *mfaLevelPtr = rapidjson::Pointer((pointer + "/mfa_level").c_str()).Get(doc) )
				if(mfaLevelPtr->IsInt()) g.mfaLevel = mfaLevelPtr->GetInt();

			if(rapidjson::Value *widgetEnabledPtr = rapidjson::Pointer((pointer + "/widget_enabled").c_str()).Get(doc) )
				if(widgetEnabledPtr->IsBool()) g.widgetEnabled = widgetEnabledPtr->GetBool();

			if(rapidjson::Value *joinedAtPtr = rapidjson::Pointer((pointer + "/joined_at").c_str()).Get(doc) )
				if(joinedAtPtr->IsString()) g.joinedAt = joinedAtPtr->GetString();

			if(rapidjson::Value *largePtr = rapidjson::Pointer((pointer + "/large").c_str()).Get(doc) )
				if(largePtr->IsBool()) g.large = largePtr->GetBool();

			if(rapidjson::Value *unavailablePtr = rapidjson::Pointer((pointer + "/unavailable").c_str()).Get(doc) )
				if(unavailablePtr->IsBool()) g.unavailable = unavailablePtr->GetBool();

			if(rapidjson::Value *memberCountPtr = rapidjson::Pointer((pointer + "/member_count").c_str()).Get(doc) )
				if(memberCountPtr->IsInt()) g.memberCount = memberCountPtr->GetInt();

			if(rapidjson::Value *maxPresencesPtr = rapidjson::Pointer((pointer + "/max_presences").c_str()).Get(doc) )
				if(maxPresencesPtr->IsInt()) g.maxPresences = maxPresencesPtr->GetInt();

			if(rapidjson::Value *maxMembersPtr = rapidjson::Pointer((pointer + "/max_members").c_str()).Get(doc) )
				if(maxMembersPtr->IsInt()) g.maxMembers = maxMembersPtr->GetInt();

			if(rapidjson::Value *premiumTierPtr = rapidjson::Pointer((pointer + "/premium_tier").c_str()).Get(doc) )
				if(premiumTierPtr->IsInt()) g.premiumTier = premiumTierPtr->GetInt();

			if(rapidjson::Value *descriptionPtr = rapidjson::Pointer((pointer + "/description").c_str()).Get(doc) )
				if(descriptionPtr->IsString()) g.description = descriptionPtr->GetString();

			if(rapidjson::Value *bannerHashPtr = rapidjson::Pointer((pointer + "/banner_hash").c_str()).Get(doc) )
				if(bannerHashPtr->IsString()) g.bannerHash = bannerHashPtr->GetString();

			return g;
		}

	};

}
